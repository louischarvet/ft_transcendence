Tournoi>
	entrer le nom du Tournoi
	> le tournoi existe > rejoindre
	> il n'existe pas > le cree

Tokens JWT >
	login >
	> creation de deux tokens: un "cle privee" stocke dans la BD user,
		un token "cle publique" qui est donne au client
	> verification du JWT : on verifie que le token du client
		correspond au token stocke
	> duree d'expiration pour le token client ?
		refresh quand on arrive a la moitie par exemple ?

	logout >
	> suppression de la cle stockee
	( pas besoin de revoquer les tokens )

	expiration des tokens 1h / 1d par exemple
	> si revoques, on verifie dans la BD si la date d'expiration
		est atteinte
	> si oui, on supprime le token

	stocker l'iat du token dans les infos du user, comparer les
	deux pour l'authentification

---------------------------------------------------

data persistante :

{
    "user": {
        "id": 1,
        "name": "NAthan",
        "type": "registered",
        "status": "pending",
        "wins": 0,
        "losses": 0,
        "friend_ship": null,
        "picture": "./pictures/BG.webp"
    },
    "message": "User created"
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTmF0aGFuIiwidHlwZSI6InJlZ2lzdGVyZWQiLCJpZCI6MSwiaWF0IjoxNzU4NjM3OTk2LCJleHAiOjE3NTg2NDUxOTZ9.ejsWVWeBNoi0Pzaqlq1k5M1Z7s9_edlXVhZCk6G5lcg",
}

-----------------------------------------------------------
17/09/2025

Todo : 

-Impossibilite de PUT name ( function : updateInfo) ---> 	OKðŸ‘Œpour userservice

-Replace getName -> getId (A voir avec Louis)
	protege et certifit lidentite de luser (name peux changer) ---> OKðŸ‘Œ (name impossible a modifier)
		A tester pour update et del par exemple , ou updateName et logout, token invalid etc....

-Attaque XSS : 

	PROTECTION AJV (Another JSON Validator)

	1. Ajout des patern dans les schema : ---> 	OKðŸ‘Œpour userservice
		exple : pattern: "^[^<>{}\"'`]*$"
	2. Max lenght va limiter les risques ---> 	OKðŸ‘Œpour userservice
		exple : maxLength: 254

	PROTECTION Sanitization backend facultatif mais utile en plus dâ€™AJV
		Permet de nettoyer les strings dans le body
	3 - npm install sanitize-html et import sanitizeHtml from 'sanitize-html';
		exple : 
				function sanitizeObject(obj) {
				for (const key in obj) {
					if (typeof obj[key] === 'string') {
					obj[key] = sanitizeHtml(obj[key], {
						allowedTags: [],
						allowedAttributes: {}
					});
					} else if (typeof obj[key] === 'object') {
					sanitizeObject(obj[key]);
					}
				}
				}

				et 

				fastify.addHook('preValidation', async (request, reply) => {
					if (request.body)
						sanitizeObject(request.body);
				});


	3 - headers de sÃ©curitÃ© HTTP ----> ajoute X-Content-Type-Options, X-XSS-Protection ---> 	OKðŸ‘Œ pour userservice
		npm install @fastify/helmet
		import helmet from '@fastify/helmet';
		await fastify.register(helmet, {
			global: true
		});

-----------


		CREATE TABLE IF NOT EXISTS tournament (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			status TEXT DEFAULT 'waiting',

				ORGANISTAION DES MATCHS ET USERS
			matchs TEXT,			----> "1;2;3;4			/ 5;6 		/ 7;8"
			players TEXT DEFAULT,	----> '1:register;2;3;4;5;6;7;8	/ 1;3;5;7	/ 3;7;1;5		/ 5'


			nbPlayersTotal INTEGER NOT NULL,
			remainingPlaces INTEGER NOT NULL,
			created_at INTEGER NOT NULL
		);

		CREATE TABLE IF NOT EXISTS history (
			id INTEGER NOT NULL,
			matchs TEXT,	----->
			players TEXT,   ----> ""
			ranking TEXT,
			winnerId INTEGER,
			created_at INTEGER NOT NULL
		);


modules:
	